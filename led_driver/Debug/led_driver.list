
led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000324  0800032c  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000324  08000324  0000132c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000324  08000324  0000132c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000324  0800032c  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000324  08000324  00001324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800032c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800032c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000308  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000015d  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000017c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001326f  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009c5  00000000  00000000  00014afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000663c3  00000000  00000000  000154bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007b882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  0007b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0007b994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	0800030c 	.word	0x0800030c

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	0800030c 	.word	0x0800030c

080001b4 <led_init>:
#define GPIOAEN (1U<<17)
#define GPIOBEN (1U<<18)
#define LED_PIN5 (1U<<5)
#define LED_PIN13 (1U<<13)

void led_init(void){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	// Enabling clock access to led port (PortA):
//	RCC->AHBENR |= GPIOAEN;
	RCC->AHBENR |= GPIOBEN;
 80001b8:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <led_init+0x34>)
 80001ba:	695b      	ldr	r3, [r3, #20]
 80001bc:	4a0a      	ldr	r2, [pc, #40]	@ (80001e8 <led_init+0x34>)
 80001be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80001c2:	6153      	str	r3, [r2, #20]

	// Set led pin as output pin:
//	GPIOA->MODER |=  (1U<<10);
//	GPIOA->MODER &= ~(1U<<11);

	GPIOB->MODER |=  (1U<<26);
 80001c4:	4b09      	ldr	r3, [pc, #36]	@ (80001ec <led_init+0x38>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a08      	ldr	r2, [pc, #32]	@ (80001ec <led_init+0x38>)
 80001ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<27);
 80001d0:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <led_init+0x38>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a05      	ldr	r2, [pc, #20]	@ (80001ec <led_init+0x38>)
 80001d6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80001da:	6013      	str	r3, [r2, #0]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	48000400 	.word	0x48000400

080001f0 <led_on>:

void led_on(void){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	// Set led pin (PA5) HIGH
//	GPIOA->ODR |= LED_PIN5;
	GPIOB->ODR |= LED_PIN13;
 80001f4:	4b05      	ldr	r3, [pc, #20]	@ (800020c <led_on+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <led_on+0x1c>)
 80001fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001fe:	6153      	str	r3, [r2, #20]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	48000400 	.word	0x48000400

08000210 <led_off>:

void led_off(void){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	// Set led pin (PA5) LOW
//	GPIOA->ODR &= ~LED_PIN5;
	GPIOB->ODR &= ~LED_PIN13;
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <led_off+0x1c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a04      	ldr	r2, [pc, #16]	@ (800022c <led_off+0x1c>)
 800021a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800021e:	6153      	str	r3, [r2, #20]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	48000400 	.word	0x48000400

08000230 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
	led_init();
 8000236:	f7ff ffbd 	bl	80001b4 <led_init>

	while (1){
		led_on();
 800023a:	f7ff ffd9 	bl	80001f0 <led_on>
		for(int i=0; i<90000; i++){}
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <main+0x1a>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a07      	ldr	r2, [pc, #28]	@ (800026c <main+0x3c>)
 800024e:	4293      	cmp	r3, r2
 8000250:	ddf8      	ble.n	8000244 <main+0x14>
		led_off();
 8000252:	f7ff ffdd 	bl	8000210 <led_off>
		for(int i=0; i<90000; i++){}
 8000256:	2300      	movs	r3, #0
 8000258:	603b      	str	r3, [r7, #0]
 800025a:	e002      	b.n	8000262 <main+0x32>
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	3301      	adds	r3, #1
 8000260:	603b      	str	r3, [r7, #0]
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	4a01      	ldr	r2, [pc, #4]	@ (800026c <main+0x3c>)
 8000266:	4293      	cmp	r3, r2
 8000268:	ddf8      	ble.n	800025c <main+0x2c>
		led_on();
 800026a:	e7e6      	b.n	800023a <main+0xa>
 800026c:	00015f8f 	.word	0x00015f8f

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	@ (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	@ (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	@ (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f811 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002a2:	f7ff ffc5 	bl	8000230 <main>

080002a6 <LoopForever>:

LoopForever:
  b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	0800032c 	.word	0x0800032c
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	4d0d      	ldr	r5, [pc, #52]	@ (80002fc <__libc_init_array+0x38>)
 80002c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000300 <__libc_init_array+0x3c>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	2600      	movs	r6, #0
 80002d0:	42a6      	cmp	r6, r4
 80002d2:	d109      	bne.n	80002e8 <__libc_init_array+0x24>
 80002d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000304 <__libc_init_array+0x40>)
 80002d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000308 <__libc_init_array+0x44>)
 80002d8:	f000 f818 	bl	800030c <_init>
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	2600      	movs	r6, #0
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d105      	bne.n	80002f2 <__libc_init_array+0x2e>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ec:	4798      	blx	r3
 80002ee:	3601      	adds	r6, #1
 80002f0:	e7ee      	b.n	80002d0 <__libc_init_array+0xc>
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	4798      	blx	r3
 80002f8:	3601      	adds	r6, #1
 80002fa:	e7f2      	b.n	80002e2 <__libc_init_array+0x1e>
 80002fc:	08000324 	.word	0x08000324
 8000300:	08000324 	.word	0x08000324
 8000304:	08000324 	.word	0x08000324
 8000308:	08000328 	.word	0x08000328

0800030c <_init>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr

08000318 <_fini>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr
